<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ASCOM.Com.ChooserSA</name>
    </assembly>
    <members>
        <member name="T:ASCOM.Com.CheckedMessageBox">
            <summary>
            Create a message dialogue with a "suppress in future" checkbox.
            </summary>
        </member>
        <member name="M:ASCOM.Com.CheckedMessageBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ASCOM.Com.CheckedMessageBox.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ASCOM.Com.ChooserAlpacaConfigurationForm">
            <summary>
            The Chooser's Alpaca configuration form.
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="M:ASCOM.Com.ChooserAlpacaConfigurationForm.#ctor(ASCOM.Com.ChooserForm)">
            <summary>
            Initialiser enabling the Chooser to pass in a reference to itself so that it's variables can be accessed
            </summary>
            <param name="chooser"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserAlpacaConfigurationForm.ChooserAlpacaConfigurationForm_Load(System.Object,System.EventArgs)">
            <summary>
            Form load event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserAlpacaConfigurationForm.BtnOK_Click(System.Object,System.EventArgs)">
            <summary>
            OK button event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserAlpacaConfigurationForm.BtnCancel_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel button event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserAlpacaConfigurationForm.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:ASCOM.Com.ChooserCustomToolStripRenderer">
            <summary>
            Custom renderer for the Chooser tool strip
            </summary>
        </member>
        <member name="M:ASCOM.Com.ChooserCustomToolStripRenderer.OnRenderMenuItemBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Prevent "selected "colour changes when hovering over disabled menu items 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserCustomToolStripRenderer.OnRenderLabelBackground(System.Windows.Forms.ToolStripItemRenderEventArgs)">
            <summary>
            Respect the BackColor property set for labels - without this they always appear with a grey background.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:ASCOM.Com.ChooserForm">
            <summary>
            Form displayed to enable the user to select an ASCOM device.
            </summary>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.Dispose(System.Boolean)">
            <summary>
            Dispose of disposable components
            </summary>
            <param name="Disposing"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.AlpacaStatusIndicatorTimerEventHandler(System.Object,System.EventArgs)">
            <summary>
            Alpaca discovery timer event handler
            </summary>
            <param name="myObject"></param>
            <param name="myEventArgs"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.CmdProperties_Click(System.Object,System.EventArgs)">
            <summary>
            Click in Properties... button. Loads the currently selected driver and activate its setup dialogue.
            </summary>
            <param name="eventSender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.DriverGeneration_Complete(System.Object,System.EventArgs)">
            <summary>
            Driver generation completion event handler
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.CreateNewAlpacaDriver(System.String)">
            <summary>
            Creates a new Alpaca driver instance with the given descriptive name
            </summary>
            <param name="deviceDescription"></param>
            <returns></returns>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.RunDynamicClientManager(System.String)">
            <summary>
            Run the Alpaca dynamic client manager application with the supplied parameters
            </summary>
            <param name="parameterString">Parameter string to pass to the application</param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.Get32BitProgramFilesPath">
            <summary>
            Get the 32bit ProgramFiles path on both 32bit and 64bit systems
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.DropDownWidth(System.Windows.Forms.ComboBox)">
            <summary>
            Return the maximum width of a combo box's drop-down items
            </summary>
            <param name="comboBox">Combo box to inspect</param>
            <returns>Maximum width of supplied combo box drop-down items</returns>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.EnableOkButton(System.Boolean)">
            <summary>
            Set the enabled state of the OK button and record this as the current state
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:ASCOM.Com.ChooserForm.EnablePropertiesButton(System.Boolean)">
            <summary>
            Set the enabled state of the Properties button and record this as the current state
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:ASCOM.Com.ChooserItem">
            <summary>
            Data class for items that are added to the Chooser display combo box
            </summary>
        </member>
        <member name="M:ASCOM.Com.ChooserItem.#ctor">
            <summary>
            Base initialiser, sets all properties to default values
            </summary>
        </member>
        <member name="M:ASCOM.Com.ChooserItem.#ctor(System.String,System.String)">
            <summary>
            Initialiser called to create an item for a COM driver
            </summary>
            <param name="progId">The driver's ProgID</param>
            <param name="ascomName">The driver's display name</param>
        </member>
        <member name="M:ASCOM.Com.ChooserItem.#ctor(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Initialiser called to create an item for a new Alpaca driver i.e. one that is not already fronted by a COM driver 
            </summary>
            <param name="deviceUniqueId">Device unique ID</param>
            <param name="deviceNumber">The Alpaca device access number</param>
            <param name="hostName">The host name (or IP address) used to access the Alpaca device</param>
            <param name="port">The Alpaca port number</param>
            <param name="ascomName">The device's ASCOM name</param>
            <param name="displayName">The device's display name</param>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.ChooserID">
            <summary>
            ID that is unique within this list of Chooser items, just used to ensure that drivers that have the same display name appear differently
            </summary>
            <returns>The Chooser item's unique ID</returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.DeviceUniqueID">
            <summary>
            ID that is globally unique for this Alpaca device
            </summary>
            <returns>ASCOM device's unique ID</returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.IsComDriver">
            <summary>
            Flag indicating whether this is a COM or new Alpaca driver
            </summary>
            <returns>True if the item is a new Alpaca driver, False if the item is an existing COM driver</returns>
            <remarks>Pre-existing COM drivers that front Alpaca devices are flagged as COM drivers. Only newly discovered Alpaca devices are flagged as such</remarks>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.ProgID">
            <summary>
            The COM ProgID
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.AscomName">
            <summary>
            The device's ASCOM device name
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.DisplayName">
            <summary>
            The device's Display name that will be used in the Chooser list
            </summary>
            <returns></returns>
            <remarks>
            For COM drivers this property has the same value as the AscomName property
            For Alpaca devices this is the AscomName but may be prefixed with information about whether this is an existing or a new Alpaca device.
            The Chooser combo box uses this property as the display variable rather than the AscomName property so that the additional Alpaca information can be included when required
            </remarks>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.DeviceNumber">
            <summary>
            The Alpaca device access number
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.HostName">
            <summary>
            The host name or IP address of the Alpaca device
            </summary>
            <returns></returns>
        </member>
        <member name="P:ASCOM.Com.ChooserItem.Port">
            <summary>
            The Alpaca IP port through which the device can be accessed
            </summary>
            <returns></returns>
        </member>
        <member name="M:ASCOM.Com.ChooserItem.CompareTo(System.Object)">
            <summary>
            Compares two ChooserItems items based on the Name field concatenated with a unique GUID
            </summary>
            <param name="otherChooserItemAsObject"></param>
            <returns>Less than zero if this instance precedes the other item in the sort order or
                     Zero if the items occupy the same position in the sort order or 
                     Greater than zero if this instance comes after the other item in the sort order</returns>
            <remarks>The concatenation is used to ensure that tow entries with identical descriptive names can be seen as distinct devices.</remarks>
        </member>
        <member name="T:ASCOM.Com.ChooserSA">
            <summary>
            The Chooser object provides a way for your application to let your user select the telescope to use.
            </summary>
            <remarks>
            <para>Calling Chooser.Choose() causes a chooser window to appear, with a drop down selector list containing all of the registered Telescope 
            drivers, listed by the driver's friendly/display name. The user sees a list of telescope types and selects one. 
            Before the OK button will light up, however, the user must click the Setup button, causing the selected driver's setup dialog to appear 
            (it calls the driver's Telescope.SetupDialog() method). When the setup dialog is closed, the OK button will light and allow the user 
            to close the Chooser itself.</para>
            
            <para>The Choose() method returns the DriverID of the selected driver. Choose() allows you to optionally pass the DriverID of a "current" 
            driver (you probably save this in the registry), and the corresponding telescope type is pre-selected in the Chooser's list. In this case, 
            the OK button starts out enabled (lit-up); the assumption is that the pre-selected driver has already been configured. </para>
            </remarks>
        </member>
        <member name="M:ASCOM.Com.ChooserSA.#ctor(ASCOM.Common.Interfaces.ILogger)">
            <summary>
            Creates a new Chooser object
            </summary>
            <param name="logger">Optional <see cref="T:ASCOM.Common.Interfaces.ILogger"/> instance to which operational debug information will be reported.</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.ChooserSA.Dispose(System.Boolean)">
            <summary>
            Does the work of cleaning up objects used by Chooser
            </summary>
            <param name="disposing">True if called by the user, false if called by the system</param>
            <remarks>You can't call this directly, use Dispose with no arguments instead.</remarks>
        </member>
        <member name="M:ASCOM.Com.ChooserSA.Dispose">
            <summary>
            Cleans up and disposes objects used by Chooser
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ASCOM.Com.ChooserSA.DeviceType">
            <summary>
            The type of device for which the Chooser will select a driver. (String, default = "Telescope")
            </summary>
            <value>The type of device for which the Chooser will select a driver. (String, default = "Telescope") 
            </value>
            <returns>The device type that has been set</returns>
            <exception cref="T:ASCOM.InvalidValueException">Thrown on setting the device type to empty string</exception>
            <remarks>This property changes the "personality" of the Chooser, allowing it to be used to select a driver for any arbitrary 
            ASCOM device type. The default value for this is "Telescope", but it could be "Focuser", "Camera", etc. 
            <para>This property is independent of the Profile object's DeviceType property. Setting Chooser's DeviceType 
            property doesn't set the DeviceType property in Profile, you must set that also when needed.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Com.ChooserSA.Choose(System.String)">
            <summary>
            Select an ASCOM driver to use, pre-selecting one in the drop-down list
            </summary>
            <param name="progId">Driver to preselect in the chooser dialogue</param>
            <returns>Driver ID of chosen driver</returns>
            <remarks>The supplied driver will be pre-selected in the Chooser's list when the chooser window is first opened.
            <para>The device type will default to Telescope if no device type is set prior to calling this method.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Com.ChooserSA.Choose">
            <summary>
            Select ASCOM driver to use without pre-selecting in the dropdown list
            </summary>
            <returns>Driver ID of chosen driver</returns>
            <remarks>
            No driver will be pre-selected in the Chooser's list when the chooser window is first opened. 
            <para>The device type will default to Telescope if no device type is set prior to calling this method.</para>
            </remarks>
        </member>
        <member name="M:ASCOM.Com.DriverCompatibility.DriverCompatibilityMessage(System.String,ASCOM.Com.DriverCompatibility.Bitness,ASCOM.Common.Interfaces.ILogger)">
            <summary>
            Return a message when a driver is not compatible with the requested 32/64bit application type. Returns an empty string if the driver is compatible
            </summary>
            <param name="progID">ProgID of the driver to be assessed</param>
            <param name="requiredBitness">Application bitness for which application compatibility should be tested</param>
            <param name="TL">Logging trace logger</param>
            <returns>String compatibility message or empty string if driver is fully compatible</returns>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.EventLog.LogEvent(System.String,System.String,System.Diagnostics.EventLogEntryType,ASCOM.Com.GlobalConstants.EventLogErrors,System.String)">
            <summary>
            Add an event record to the ASCOM Windows event log
            </summary>
            <param name="Caller">Name of routine creating the event</param>
            <param name="Msg">Event message</param>
            <param name="Severity">Event severity</param>
            <param name="Id">Id number</param>
            <param name="Except">Initiating exception or Nothing</param>
            <remarks></remarks>
        </member>
        <member name="T:ASCOM.Com.Exceptions.HelperException">
            <summary>
            Base exception for the Utilities components
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.HelperException.#ctor(System.String)">
            <summary>
            Create a new exception with message
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.HelperException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception with message and inner exception
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <param name="inner">Exception to be reported as the inner exception</param>
            <remarks></remarks>
        </member>
        <member name="T:ASCOM.Com.Exceptions.ProfilePersistenceException">
            <summary>
            Exception thrown if there is any problem in reading or writing the profile from or to the file system
            </summary>
            <remarks>This is an infrastructural exception indicating that there is a problem at the file access layer
            in the profile code. Possible underlying reasons are security access permissions, file system full and hardware failure.
            </remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.ProfilePersistenceException.#ctor(System.String)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.ProfilePersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <param name="inner">Exception to be reported as the inner exception</param>
            <remarks></remarks>
        </member>
        <member name="T:ASCOM.Com.Exceptions.DriverNotRegisteredException">
            <summary>
            Exception thrown when a profile request is made for a driver that is not registered
            </summary>
            <remarks>Drivers must be registered before other profile commands are used to manipulate their 
            values.</remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.DriverNotRegisteredException.#ctor(System.String)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.Exceptions.DriverNotRegisteredException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new exception with message 
            </summary>
            <param name="message">Message to be reported by the exception</param>
            <param name="inner">Exception to be reported as the inner exception</param>
            <remarks></remarks>
        </member>
        <member name="T:ASCOM.Com.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:ASCOM.Com.Extensions.Right(System.String,System.Int32)">
            <summary>
            Get substring of specified number of characters on the right.
            </summary>
        </member>
        <member name="T:ASCOM.Com.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASCOM.Com.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASCOM.Com.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:ASCOM.Com.RegistryAccess.AccessRights">
            <summary>
            Enum containing all the possible registry access rights values. The built-in RegistryRights enum only has a partial collection
            and often returns values such as -1 or large positive and negative integer values when converted to a string
            The Flags attribute ensures that the ToString operation returns an aggregate list of discrete values
            </summary>
        </member>
        <member name="M:ASCOM.Com.RegistryAccess.NewCode(System.Boolean)">
            <summary>
            Common code for the new method
            </summary>
            <param name="p_IgnoreChecks">If true, suppresses the exception normally thrown if a valid profile is not present</param>
            <remarks></remarks>
        </member>
        <member name="M:ASCOM.Com.RegistryAccess.GetProfile(System.String,System.String,System.String)">
            <summary>
            Read a single value from a key
            </summary>
            <param name="p_SubKeyName"></param>
            <param name="p_ValueName"></param>
            <param name="p_DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:ASCOM.Com.My.Resources.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ASCOM.Com.My.Resources.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ASCOM.Com.My.Resources.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ASCOM.Com.My.Resources.Resources.ASCOM">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:ASCOM.Com.My.Resources.Resources.ASCOMAlpacaMidRes">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
